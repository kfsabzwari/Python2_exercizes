Python 2.7.14 (default, Sep 22 2017, 00:05:22) 
[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 

>>> 

>>> import threading
>>> import time
>>> lock = threading.Lock()
>>> lock.acquire()
True
>>> lock.release()
>>> with lock:
	print 'critical region'

	
critical region
>>> lock.release()

Traceback (most recent call last):
  File "<pyshell#10>", line 1, in <module>
    lock.release()
error: release unlocked lock
>>> def test():
	print 'starting'
	lock.acquire()
	print 'acquired'
	time.sleep(10)
	print 'releasing'
	lock.release()
	print 'finished'

	
>>> thread = threading.Thread(target=test)
>>> thread.start()
starting
>>> 
acquired

>>> 
>>> 
>>> 
>>> 
>>> releasing
finished

>>> thread = threading.Thread(target=test)
>>> lock.acquire()
True
>>> thread.start()
starting
>>> 

>>> lock.release()
acquired
>>> lock.acquire()
releasing
finishedTrue

>>> lock.release()
>>> thread = threading.Thread(target=test)
>>> thread.start()
starting
>>> 
acquired

>>> lock.release()
>>> releasing
Exception in thread Thread-3:
Traceback (most recent call last):
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py", line 801, in __bootstrap_inner
    self.run()
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.py", line 754, in run
    self.__target(*self.__args, **self.__kwargs)
  File "<pyshell#19>", line 7, in test
error: release unlocked lock


>>> 
>>> 

>>> 
======= RESTART: /Users/grantj/Dropbox/Class22012018/super_example.py =======
>>> Contract
<class '__main__.Contract'>
>>> Contract()

Traceback (most recent call last):
  File "<pyshell#43>", line 1, in <module>
    Contract()
TypeError: Can't instantiate abstract class Contract with abstract methods check
>>> 
======= RESTART: /Users/grantj/Dropbox/Class22012018/super_example.py =======
>>> integers = Integer()
>>> integers.check(5)
check value is integer
>>> integers.check(1.0)
check value is integer

Traceback (most recent call last):
  File "<pyshell#46>", line 1, in <module>
    integers.check(1.0)
  File "/Users/grantj/Dropbox/Class22012018/super_example.py", line 20, in check
    assert isinstance(value, int)
AssertionError
>>> assert False

Traceback (most recent call last):
  File "<pyshell#47>", line 1, in <module>
    assert False
AssertionError
>>> 
======= RESTART: /Users/grantj/Dropbox/Class22012018/super_example.py =======
check value is integer
check value is positive
>>> 
======= RESTART: /Users/grantj/Dropbox/Class22012018/super_example.py =======
check value is integer
check value is positive
>>> posints = PositiveInteger()
>>> posints.check(5)
check value is positive
>>> 
======= RESTART: /Users/grantj/Dropbox/Class22012018/super_example.py =======
check value is integer
check contract
check value is positive
check contract
>>> posints = PositiveInteger()
>>> posints.check(10)
check value is positive
check contract
>>> 
======= RESTART: /Users/grantj/Dropbox/Class22012018/super_example.py =======
check value is integer
check contract
check value is positive
check contract
>>> posints.check(10)
check value is positive
check value is integer
check contract
>>> PositiveInteger.mro()
[<class '__main__.PositiveInteger'>, <class '__main__.Positive'>, <class '__main__.Integer'>, <class '__main__.Contract'>, <type 'object'>]
>>> class Test:
	pass

>>> Test
<class __main__.Test at 0x109e793f8>
>>> del Test
>>> def f(x):
	y = x**2
	import random
	class Switch:
		pass
	def g(z):
		pass
	print locals()

	
>>> f(5)
{'y': 25, 'x': 5, 'Switch': <class __main__.Switch at 0x109e79460>, 'random': <module 'random' from '/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/random.pyc'>, 'g': <function g at 0x109e91050>}
>>> def f(x):
	y = x ** 2
	def g(z):
		return x, y, z, w, len
	print g(10)

	
>>> f(5)

Traceback (most recent call last):
  File "<pyshell#75>", line 1, in <module>
    f(5)
  File "<pyshell#74>", line 5, in f
    print g(10)
  File "<pyshell#74>", line 4, in g
    return x, y, z, w, len
NameError: global name 'w' is not defined
>>> w = 100
>>> f(5)
(5, 25, 10, 100, <built-in function len>)
>>> def f(x):
	y = x ** 2
	def g(z):
		return x, y, z, w, len
	return g

>>> h = f(2)
>>> type(h)
<type 'function'>
>>> h.__name__
'g'
>>> h(10)
(2, 4, 10, 100, <built-in function len>)
>>> def f(x):
	def g(y):
		return x, y
	return g

>>> h = f(1)
>>> i = f(2)
>>> j = f(3)
>>> [type(func) for func in [h, i, j]]
[<type 'function'>, <type 'function'>, <type 'function'>]
>>> [func.__name__ for func in [h, i, j]]
['g', 'g', 'g']
>>> [func.__doc__ for func in [h, i, j]]
[None, None, None]
>>> [id(func) for func in [h, i, j]]
[4461238824, 4461236304, 4461238944]
>>> [func.__code__.co_code for func in [h, i, j]]
['\x88\x00\x00|\x00\x00f\x02\x00S', '\x88\x00\x00|\x00\x00f\x02\x00S', '\x88\x00\x00|\x00\x00f\x02\x00S']
>>> [func(10) for func in [h, i, j]]
[(1, 10), (2, 10), (3, 10)]
>>> [func.__closure__[0].cell_contents for func in [h, i, j]]
[1, 2, 3]
>>> def add2(x):
	return 2 + x

>>> add2(5)
7
>>> def add3(x):
	return 3 + x

>>> add3(10)
13
>>> def make_adder(y):
	def add_constant(x):
		return y + x

	
>>> add_two = make_adder(2)
>>> type(add_two)
<type 'NoneType'>
>>> add_two(5)

Traceback (most recent call last):
  File "<pyshell#113>", line 1, in <module>
    add_two(5)
TypeError: 'NoneType' object is not callable
>>> def make_adder(y):
	def add_constant(x):
		return y + x
	return add_constant

>>> add_two = make_adder(2)
>>> add_two(5)
7
>>> add_three = make_adder(3)
>>> add_three(10)
13
>>> add_one, add_two, add_three, add_four = map(make_adder, range(1, 5))
>>> 
>>> add_four(0)
4
>>> type(add_four)
<type 'function'>
>>> import math
>>> math.cos(0)
1.0
>>> math.cos(math.pi)
-1.0
>>> orig_cos = math.cos
>>> def logging_cos(x):
	"Wrapper around math.cos that logs inputs and outputs."
	print 'cos() called with', x
	answer = orig_cos(x)
	print 'the answer is', answer
	return answer

>>> math.cos = logging_cos
>>> math.cos(0)
cos() called with 0
the answer is 1.0
1.0
>>> orig_sin = math.sin
>>> def logging_sin(x):
	"Wrapper around math.sin that logs inputs and outputs."
	print 'sin() called with', x
	answer = orig_sin(x)
	print 'the answer is', answer
	return answer

>>> math.sin = logging_sin
>>> math.sin(0)
sin() called with 0
the answer is 0.0
0.0
>>> def add_logging(orig_func):
	def logging_func(x):
		'Wrapper around math functions that logs inputs and outputs'
		print 'orig_func() called with', x
		answer = orig_func(x)
		print 'the answer is', answer
		return answer
	return logging_func

>>> math.tan = add_logging(math.tan)
>>> math.tan(0)
orig_func() called with 0
the answer is 0.0
0.0
>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
>>> square(10)
100
>>> square = add_logging(square)
>>> square(10)
orig_func() called with 10
the answer is 100
100
>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
>>> square(10)
orig_func() called with 10
the answer is 100
100
>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
>>> square(10)
square() called with 10
the answer is 100
100
>>> help(square)
Help on function logging_func in module __main__:

logging_func(x)
    Wrapper around functions that logs inputs and outputs.

>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
>>> help(square)
Help on function square in module __main__:

square(x)
    Return a value times itself.

>>> square(10)
square() called with 10
the answer is 100
100
>>> import math
>>> math.sin(0)
0.0
>>> help(math.sin)
Help on built-in function sin in module math:

sin(...)
    sin(x)
    
    Return the sine of x (measured in radians).

>>> math.sin = add_logging(math.sin)
>>> help(math.sin)
Help on function sin in module __main__:

sin(x)
    sin(x)
    
    Return the sine of x (measured in radians).

>>> math.sin(0)
sin() called with 0
the answer is 0.0
0.0
>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
>>> big_func(3)
-3
>>> big_func(3)
-3
>>> cache = {}
>>> def cache_big_func(x):
	if x in cache:
		return cache[x]
	else:
		result = big_func(x)
		cache[x] = result
		return result

	
>>> cache_big_func(3)
-3
>>> cache_big_func(3)
-3
>>> cache
{3: -3}
>>> orig_func = big_func
>>> def cache_big_func(x):
	if x in cache:
		return cache[x]
	else:
		result = orig_func(x)
		cache[x] = result
		return result

	
>>> big_func = cache_big_func
>>> big_func(3)
-3
>>> big_func(4)
-4
>>> big_func(4)
-4
>>> cache
{3: -3, 4: -4}
>>> 

>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
>>> help(big_func)
Help on function big_func in module __main__:

big_func(x)
    Simulate a big, slow, expensive function.

>>> big_func(10)
-10
>>> big_func(10)
-10
>>> cache

Traceback (most recent call last):
  File "<pyshell#199>", line 1, in <module>
    cache
NameError: name 'cache' is not defined
>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
>>> big_func(10)
-10
>>> big_func(10)
-10
>>> big_func.cache
{10: -10}
>>> test_cases = []
>>> def register(func):
	test_cases.append(func)

	
>>> @register
def test_addition():
	assert 1 + 2 == 3

	
>>> test_cases
[<function test_addition at 0x10bc40b90>]
>>> test_addition
>>> test_addition()

Traceback (most recent call last):
  File "<pyshell#213>", line 1, in <module>
    test_addition()
TypeError: 'NoneType' object is not callable
>>> def register(func):
	test_cases.append(func)
	return func

>>> class TestSuite(object):
	def __init__(self):
		self.test_cases = []
	def run(self):
		for test in self.test_cases:
			test()
	def add(self, test_func):
		self.test_cases.append(test_func)
		return test_func

	
>>> suite = TestSuite()
>>> @suite.add
def test_addition():
	assert 1 + 2 == 3

	
>>> @suite.add
def test_subtraction():
	assert 6 - 3 == 3

	
>>> suite.test_cases
[<function test_addition at 0x10bc40b18>, <function test_subtraction at 0x10bc4e7d0>]
>>> suite.run()
>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
>>> help(square)
Help on function square in module __main__:

square(x)
    Return a value times itself.

>>> help(big_func)
Help on function big_func in module __main__:

big_func(x)
    Simulate a big, slow, expensive function.

>>> square(10)
square() called with 10
the answer is 100
100
>>> big_func(5)
-5
>>> big_func(5)
-5
>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
>>> square(5)
square() called with 5
the answer is 25
25
>>> square(5)
25
>>> big_func(5)
big_func() called with 5
the answer is -5
-5
>>> big_func(5)
big_func() called with 5
the answer is -5
-5
>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
square() called with 3
the answer is 9
big_func() called with 10
the answer is -10
big_func() called with 10
the answer is -10
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/star_school.py ========
32
32
32
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/star_school.py ========
32
32
32
32
32
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/star_school.py ========
32
32
32
32
32
32
32
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/star_school.py ========
32
32
32
32
32
32
32
>>> f(5, 10)
15
>>> f(5, 10, 20)
35
>>> f(5, 10, 20, 30)
65
>>> f(5, 10, 20, d=30)
65
>>> f(a=5, 10, 20, d=30)
SyntaxError: non-keyword arg after keyword arg
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/star_school.py ========
32
32
32
32
32
32
32
>>> f(1, 2, 3, 4)
1
2
(3, 4)
{}
>>> f(1, 2, 3, 4, apple=10, banana=20)
1
2
(3, 4)
{'apple': 10, 'banana': 20}
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/star_school.py ========
32
32
32
32
32
32
32
10
20
(30, 40, 50)
{'y': 2, 'x': 1, 'z': 3}
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/star_school.py ========
32
32
32
32
32
32
32
10
20
(30, 40, 50)
{'y': 2, 'x': 1, 'z': 3}
function called with: (2, 5) {}
the answer is 32
function called with: () {'base': 2, 'exp': 5}
the answer is 32
function called with: (2,) {'exp': 5}
the answer is 32
32 32 32
>>> 
====== RESTART: /Users/grantj/Dropbox/Class22012018/decorator_school.py ======
square() called with (3,)
the answer is 9
big_func() called with (10,)
the answer is -10
big_func() called with (10,)
the answer is -10
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/duck_typing.py ========
202238
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/duck_typing.py ========
202238
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/duck_typing.py ========
202238
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/duck_typing.py ========
202238
fake file initialized
fake file read
fake file closed
17
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/duck_typing.py ========
202238
fake file initialized
fake file read
fake file closed
17
>>> 
======== RESTART: /Users/grantj/Dropbox/Class22012018/duck_typing.py ========
202238
fake file initialized
fake file read
fake file closed
17
14
>>> isinstance(s, file)
False
>>> def test():
	print 'inside test'

	
>>> test()
inside test
>>> test
<function test at 0x10b049398>
>>> def test():
	print 'inside another test'

	
>>> test
<function test at 0x10b049410>
>>> m = [0, 1, 2]
>>> del m
>>> m = [0, 1, 2]
>>> m.append(m)
>>> m
[0, 1, 2, [...]]
>>> del m[-1]
>>> m
[0, 1, 2]
>>> m.append(m)
>>> m
[0, 1, 2, [...]]
>>> del m
>>> m = []
>>> k = m
>>> del m
>>> import os
>>> dir(os.path)
['__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '_joinrealpath', '_unicode', '_uvarprog', '_varprog', 'abspath', 'altsep', 'basename', 'commonprefix', 'curdir', 'defpath', 'devnull', 'dirname', 'exists', 'expanduser', 'expandvars', 'extsep', 'genericpath', 'getatime', 'getctime', 'getmtime', 'getsize', 'isabs', 'isdir', 'isfile', 'islink', 'ismount', 'join', 'lexists', 'normcase', 'normpath', 'os', 'pardir', 'pathsep', 'realpath', 'relpath', 'samefile', 'sameopenfile', 'samestat', 'sep', 'split', 'splitdrive', 'splitext', 'stat', 'supports_unicode_filenames', 'sys', 'walk', 'warnings']
>>> help(os.path.dirname)
Help on function dirname in module posixpath:

dirname(p)
    Returns the directory component of a pathname

>>> os.getcwd()
'/Users/grantj/Dropbox/Class22012018'
>>> cwd = os.getcwd()
>>> help(os.path.join)
Help on function join in module posixpath:

join(a, *p)
    Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded.  An empty last part will result in a path that
    ends with a separator.

>>> os.path.join(cwd, 'notes', 'links.txt')
'/Users/grantj/Dropbox/Class22012018/notes/links.txt'
>>> links = _
>>> os.path.isfile(links)
True
>>> os.path.isfile(cwd)
False
>>> os.path.isdir(cwd)
True
>>> os.path.basename(links)
'links.txt'
>>> links
'/Users/grantj/Dropbox/Class22012018/notes/links.txt'
>>> os.path.split(links)
('/Users/grantj/Dropbox/Class22012018/notes', 'links.txt')
>>> os.path.split(cwd)
('/Users/grantj/Dropbox', 'Class22012018')
>>> os.path.splitext(links)
('/Users/grantj/Dropbox/Class22012018/notes/links', '.txt')
>>> with open('temp.txt', 'w'):
	
KeyboardInterrupt
>>> with open('temp.txt', 'w') as f:
	f.write('Hello world!\n')

	
>>> with open('temp.txt') as f:
	print f.read()

	
Hello world!

>>> with open('temp.txt', 'a') as f:
	f.write('A second line\n')

	
>>> with open('temp.txt') as f:
	print f.read()

	
Hello world!
A second line

>>> with open('temp.txt', 'r+') as f:
	print f.readline()
	print t.tell()

	
Hello world!


Traceback (most recent call last):
  File "<pyshell#307>", line 3, in <module>
    print t.tell()
NameError: name 't' is not defined
>>> with open('temp.txt', 'r+') as f:
	print f.readline()
	print f.tell()

	
Hello world!

13
>>> with open('temp.png', 'wb') as image:
	image.write('some image png siganture')

	
>>> os.remove('temp.png')
>>> os.remove('temp.txt')
>>> os.remove('temp.txt')

Traceback (most recent call last):
  File "<pyshell#315>", line 1, in <module>
    os.remove('temp.txt')
OSError: [Errno 2] No such file or directory: 'temp.txt'
>>> os.mkdir('temp')
>>> os.rmdir('temp')
>>> os.rmdir('temp')

Traceback (most recent call last):
  File "<pyshell#318>", line 1, in <module>
    os.rmdir('temp')
OSError: [Errno 2] No such file or directory: 'temp'
>>> 
>>> # paths: dirname  basename  split  splitext  join
>>> # Operating system independent! Yay.
>>> # remove() mkdir() rmdir() (raise OSError when fail)
>>> # open(fn) open(fn, 'w')   (raise IOError when fail)
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/filedict.py ==========

Traceback (most recent call last):
  File "/Users/grantj/Dropbox/Class22012018/filedict.py", line 24, in <module>
    d = FileDict('jenks')
  File "/Users/grantj/Dropbox/Class22012018/filedict.py", line 12, in __init__
    os.mkdir(dirname)
NameError: global name 'os' is not defined
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/filedict.py ==========
>>> d['grant']

Traceback (most recent call last):
  File "<pyshell#324>", line 1, in <module>
    d['grant']
  File "/Users/grantj/Dropbox/Class22012018/filedict.py", line 23, in __getitem__
    raise KeyError(key)
KeyError: 'grant'
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/filedict.py ==========

Traceback (most recent call last):
  File "/Users/grantj/Dropbox/Class22012018/filedict.py", line 31, in <module>
    d = FileDict('jenks')
  File "/Users/grantj/Dropbox/Class22012018/filedict.py", line 14, in __init__
    os.mkdir(dirname)
OSError: [Errno 17] File exists: 'jenks'
>>> os.mkdir('jenks')

Traceback (most recent call last):
  File "<pyshell#325>", line 1, in <module>
    os.mkdir('jenks')
OSError: [Errno 17] File exists: 'jenks'
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/filedict.py ==========
>>> d['grant'] = 'orange'
>>> d['shannon'] = 'green'
>>> d['bethany'] = 'pink'
>>> d['shannon']
'green'
>>> os.listdir('jenks')
['bethany', 'grant', 'shannon']
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/filedict.py ==========
FileDict(dirname='jenks')
orange
no mark key
2
['bethany', 'grant']
>>> d = dict()
>>> dir(d)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/filedict.py ==========
FileDict(dirname='jenks')
orange
no mark key
2
['bethany', 'grant']
>>> d.get('mark', '')
''
>>> d.keys()
['bethany', 'grant']
>>> 'bethany' in d
True
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/filedict.py ==========
FileDict(dirname='jenks')
orange
no mark key
2
['bethany', 'grant']
>>> d.keys()
['bethany', 'grant']
>>> d['mark']
'blue'
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/filedict.py ==========
FileDict(dirname='jenks')
orange
blue
3
['bethany', 'grant', 'mark']

Traceback (most recent call last):
  File "/Users/grantj/Dropbox/Class22012018/filedict.py", line 68, in <module>
    print d.pop('shannon')
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/_abcoll.py", line 519, in pop
    value = self[key]
  File "/Users/grantj/Dropbox/Class22012018/filedict.py", line 27, in __getitem__
    raise KeyError(key)
KeyError: 'shannon'
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/filedict.py ==========
FileDict(dirname='jenks')
orange

3
['bethany', 'grant', 'mark']

True
white
>>> lastname = 'Simpsons'
>>> first_names = ['Homer', 'Marge', 'Bart', 'Lisa', 'Maggie']
>>> print 'The %s Family' % lastname
The Simpsons Family
>>> print '=' * 23
=======================
>>> print '=' * 20
====================
>>> for name in first_names:
	print '* %s' % name

	
* Homer
* Marge
* Bart
* Lisa
* Maggie
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
>>> help(show_family)
Help on function show_family in module __main__:

show_family(lastname, first_names)
    Display the family members in a nice tabular format.

>>> import dis
>>> dis.dis(show_family)
 12           0 LOAD_CONST               1 ('The %s Family')
              3 LOAD_FAST                0 (lastname)
              6 BINARY_MODULO       
              7 PRINT_ITEM          
              8 PRINT_NEWLINE       

 13           9 LOAD_CONST               2 ('=')
             12 LOAD_CONST               3 (11)
             15 LOAD_GLOBAL              0 (len)
             18 LOAD_FAST                0 (lastname)
             21 CALL_FUNCTION            1
             24 BINARY_ADD          
             25 BINARY_MULTIPLY     
             26 PRINT_ITEM          
             27 PRINT_NEWLINE       

 14          28 SETUP_LOOP              23 (to 54)
             31 LOAD_FAST                1 (first_names)
             34 GET_ITER            
        >>   35 FOR_ITER                15 (to 53)
             38 STORE_FAST               2 (name)

 15          41 LOAD_CONST               4 ('* %s')
             44 LOAD_FAST                2 (name)
             47 BINARY_MODULO       
             48 PRINT_ITEM          
             49 PRINT_NEWLINE       
             50 JUMP_ABSOLUTE           35
        >>   53 POP_BLOCK           
        >>   54 LOAD_CONST               5 (None)
             57 RETURN_VALUE        
>>> print 'Hello world!'
Hello world!
>>> import sys
>>> sys.stdout.write('Hello world!')
Hello world!
>>> orig_stdout = sys.stdout
>>> f = open('temp.txt', 'w')
>>> sys.stdout = f
>>> print 'Hello world!'
>>> print 'Second line'
>>> print 'Last message'
>>> sys.stdout = orig_stdout
>>> print 'Hello world!'
Hello world!
>>> f.close()
>>> with open('temp.txt') as reader:
	print reader.read()

	
Hello world!
Second line
Last message

>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family

Traceback (most recent call last):
  File "/Users/grantj/Dropbox/Class22012018/redirect.py", line 22, in <module>
    show_family('Simpsons', ['Homer', 'Marge', 'Bart', 'Lisa', 'Maggie'])
  File "/Users/grantj/Dropbox/Class22012018/redirect.py", line 15, in show_family
    print '=' * (11 + len(lastname_foo))
NameError: global name 'lastname_foo' is not defined
>>> print 'Hello world!'
Hello world!
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family

Traceback (most recent call last):
  File "/Users/grantj/Dropbox/Class22012018/redirect.py", line 23, in <module>
    show_family('Simpsons', ['Homer', 'Marge', 'Bart', 'Lisa', 'Maggie'])
  File "/Users/grantj/Dropbox/Class22012018/redirect.py", line 15, in show_family
    print '=' * (11 + len(lastname_foo))
NameError: global name 'lastname_foo' is not defined
>>> print 'Hello world!'
Hello world!
>>> help(show_family)
Help on function show_family in module __main__:

show_family(lastname, first_names)
    Display the family members in a nice tabular format.

>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.



Traceback (most recent call last):
  File "/Users/grantj/Dropbox/Class22012018/redirect.py", line 45, in <module>
    os.remove('show_family.help.txt')
NameError: name 'os' is not defined
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
>>> print 'Hello world!'
Hello world!
>>> with open('dis.txt') as reader:
	print reader.read()[:200]

	
 16           0 LOAD_CONST               1 ('The %s Family')
              3 LOAD_FAST                0 (lastname)
              6 BINARY_MODULO       
              7 PRINT_ITEM          
           
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
>>> help(issubclass)
Help on built-in function issubclass in module __builtin__:

issubclass(...)
    issubclass(C, B) -> bool
    
    Return whether class C is a subclass (i.e., a derived class) of class B.
    When using a tuple as the second argument issubclass(X, (A, B, ...)),
    is a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).

>>> issubclass(bool, int)
True
>>> issubclass(list, tuple)
False
>>> from collections import Sequence
>>> issubclass(list, Sequence)
True
>>> issubclass(tuple, Sequence)
True
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
>>> import StringIO
>>> s = StringIO.StringIO()
>>> s.write('Hello World\n')
>>> s.write('A Second Line\n')
>>> s.write('Finished\n')
>>> dir(s)
['__doc__', '__init__', '__iter__', '__module__', 'buf', 'buflist', 'close', 'closed', 'flush', 'getvalue', 'isatty', 'len', 'next', 'pos', 'read', 'readline', 'readlines', 'seek', 'softspace', 'tell', 'truncate', 'write', 'writelines']
>>> help(s.getvalue)
Help on method getvalue in module StringIO:

getvalue(self) method of StringIO.StringIO instance
    Retrieve the entire contents of the "file" at any time before
    the StringIO object's close() method is called.
    
    The StringIO object can accept either Unicode or 8-bit strings,
    but mixing the two may take some care. If both are used, 8-bit
    strings that cannot be interpreted as 7-bit ASCII (that use the
    8th bit) will cause a UnicodeError to be raised when getvalue()
    is called.

>>> s.getvalue()
'Hello World\nA Second Line\nFinished\n'
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
>>> s
'Help on function show_family in module __main__:\n\nshow_family(lastname, first_names)\n    Display the family members in a nice tabular format.\n\n'
>>> with s:
	pass


Traceback (most recent call last):
  File "<pyshell#388>", line 1, in <module>
    with s:
AttributeError: __exit__
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie

Traceback (most recent call last):
  File "/Users/grantj/Dropbox/Class22012018/redirect.py", line 50, in <module>
    with StringIO() as s:
AttributeError: StringIO instance has no attribute '__exit__'
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie

Traceback (most recent call last):
  File "/Users/grantj/Dropbox/Class22012018/redirect.py", line 64, in <module>
    print s.getvalue().upper()
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/StringIO.py", line 269, in getvalue
    _complain_ifclosed(self.closed)
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/StringIO.py", line 40, in _complain_ifclosed
    raise ValueError, "I/O operation on closed file"
ValueError: I/O operation on closed file
>>> 
========== RESTART: /Users/grantj/Dropbox/Class22012018/redirect.py ==========
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
The Simpsons Family
===================
* Homer
* Marge
* Bart
* Lisa
* Maggie
HELP ON FUNCTION SHOW_FAMILY IN MODULE __MAIN__:

SHOW_FAMILY(LASTNAME, FIRST_NAMES)
    DISPLAY THE FAMILY MEMBERS IN A NICE TABULAR FORMAT.


DONE
>>> import urllib
>>> con = urllib.urlopen('https://www.python.org/')
>>> data = con.read()
>>> con.close()
>>> with Closing(urllib.urlopen('https://www.python.org/')):
	data = con.read()

	

Traceback (most recent call last):
  File "<pyshell#395>", line 2, in <module>
    data = con.read()
TypeError: 'NoneType' object is not callable
>>> with Closing(urllib.urlopen('https://www.python.org/')) as con:
	data = con.read()

	
>>> 
